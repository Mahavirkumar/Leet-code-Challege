Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

code:-
class Solution {
    
    boolean issame(int counttxt[],int countpat[])
    { for(int i=0;i<256;i++){
            if(counttxt[i]!=countpat[i])
                return false;
            }     
                return true;
    }
        
    public boolean checkInclusion(String s2, String s1) {
        if(s2.length()>s1.length())
            return false;
        int counttxt[]=new int[256];
        int countpat[]=new int[256];
        for(int i=0;i<s2.length();i++){
            counttxt[s1.charAt(i)]++;
             countpat[s2.charAt(i)]++;            
            
        }
           if(issame(counttxt,countpat))
                return true;
        
        for(int i=s2.length();i<s1.length();i++){
            if(issame(counttxt,countpat))
                return true;
            
            counttxt[s1.charAt(i)]++;
            counttxt[s1.charAt(i-s2.length())]--;
             if(issame(counttxt,countpat))
                return true;
        }
        return false;
        
    }
    
}
