Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
 link:-  https://leetcode.com/explore/challenge/card/july-leetcoding-challenge/547/week-4-july-22nd-july-28th/3398/
 
 cdoe
 class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Stack<TreeNode> s1=new Stack();
        Stack<TreeNode> s2=new Stack();
        
        List<List<Integer>> res=new ArrayList<>();
        if(root==null)
            return res;
        s1.push(root);
        while((!s1.isEmpty())||(!s2.isEmpty())){
               List<Integer> al=new ArrayList<>();
            while(!s1.isEmpty()){
                
                //System.out.print(s1.peek().val);
                 al.add(s1.peek().val); 
                if(s1.peek().left!=null)
                    s2.push(s1.peek().left);
            
                     if(s1.peek().right!=null)
                    s2.push(s1.peek().right);
                s1.pop();
                }
            res.add(al);
             List<Integer> al1=new ArrayList<>();
                     while(!s2.isEmpty()){
                //System.out.print(s2.peek().val);
                     al1.add(s2.peek().val);    
                if(s2.peek().right!=null)
                    s1.push(s2.peek().right);
            
                     if(s2.peek().left!=null)
                    s1.push(s2.peek().left);
                         s2.pop();
                }
              if(!al1.isEmpty())
                    res.add(al1);
            }
        return res;
    }
}
